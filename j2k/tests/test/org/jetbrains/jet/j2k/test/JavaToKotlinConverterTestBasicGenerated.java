/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.j2k.test;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.j2k.test.AbstractJavaToKotlinConveterTestBasic;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("j2k/tests/testData/ast")
@InnerTestClasses({JavaToKotlinConverterTestBasicGenerated.Annotations.class, JavaToKotlinConverterTestBasicGenerated.AnonymousBlock.class, JavaToKotlinConverterTestBasicGenerated.ArrayAccessExpression.class, JavaToKotlinConverterTestBasicGenerated.ArrayInitializerExpression.class, JavaToKotlinConverterTestBasicGenerated.ArrayType.class, JavaToKotlinConverterTestBasicGenerated.AssertStatement.class, JavaToKotlinConverterTestBasicGenerated.AssignmentExpression.class, JavaToKotlinConverterTestBasicGenerated.BinaryExpression.class, JavaToKotlinConverterTestBasicGenerated.BoxedType.class, JavaToKotlinConverterTestBasicGenerated.BreakStatement.class, JavaToKotlinConverterTestBasicGenerated.CallChainExpression.class, JavaToKotlinConverterTestBasicGenerated.Class.class, JavaToKotlinConverterTestBasicGenerated.ClassExpression.class, JavaToKotlinConverterTestBasicGenerated.ConditionalExpression.class, JavaToKotlinConverterTestBasicGenerated.Constructors.class, JavaToKotlinConverterTestBasicGenerated.ContinueStatement.class, JavaToKotlinConverterTestBasicGenerated.DeclarationStatement.class, JavaToKotlinConverterTestBasicGenerated.DoWhileStatement.class, JavaToKotlinConverterTestBasicGenerated.Enum.class, JavaToKotlinConverterTestBasicGenerated.Field.class, JavaToKotlinConverterTestBasicGenerated.For.class, JavaToKotlinConverterTestBasicGenerated.ForeachStatement.class, JavaToKotlinConverterTestBasicGenerated.Function.class, JavaToKotlinConverterTestBasicGenerated.Identifier.class, JavaToKotlinConverterTestBasicGenerated.IfStatement.class, JavaToKotlinConverterTestBasicGenerated.ImportStatement.class, JavaToKotlinConverterTestBasicGenerated.InProjectionType.class, JavaToKotlinConverterTestBasicGenerated.Inheritance.class, JavaToKotlinConverterTestBasicGenerated.IsOperator.class, JavaToKotlinConverterTestBasicGenerated.Issues.class, JavaToKotlinConverterTestBasicGenerated.KotlinExclusion.class, JavaToKotlinConverterTestBasicGenerated.LabelStatement.class, JavaToKotlinConverterTestBasicGenerated.List.class, JavaToKotlinConverterTestBasicGenerated.LiteralExpression.class, JavaToKotlinConverterTestBasicGenerated.LocalVariable.class, JavaToKotlinConverterTestBasicGenerated.MethodCallExpression.class, JavaToKotlinConverterTestBasicGenerated.Misc.class, JavaToKotlinConverterTestBasicGenerated.NewClassExpression.class, JavaToKotlinConverterTestBasicGenerated.ObjectLiteral.class, JavaToKotlinConverterTestBasicGenerated.OutProjectionType.class, JavaToKotlinConverterTestBasicGenerated.PackageStatement.class, JavaToKotlinConverterTestBasicGenerated.ParenthesizedExpression.class, JavaToKotlinConverterTestBasicGenerated.PolyadicExpression.class, JavaToKotlinConverterTestBasicGenerated.PostfixOperator.class, JavaToKotlinConverterTestBasicGenerated.PrefixOperator.class, JavaToKotlinConverterTestBasicGenerated.RawGenerics.class, JavaToKotlinConverterTestBasicGenerated.ReturnStatement.class, JavaToKotlinConverterTestBasicGenerated.StarProjectionType.class, JavaToKotlinConverterTestBasicGenerated.SuperExpression.class, JavaToKotlinConverterTestBasicGenerated.Switch.class, JavaToKotlinConverterTestBasicGenerated.SynchronizedStatement.class, JavaToKotlinConverterTestBasicGenerated.ThisExpression.class, JavaToKotlinConverterTestBasicGenerated.ThrowStatement.class, JavaToKotlinConverterTestBasicGenerated.Trait.class, JavaToKotlinConverterTestBasicGenerated.TryStatement.class, JavaToKotlinConverterTestBasicGenerated.TypeCastExpression.class, JavaToKotlinConverterTestBasicGenerated.TypeParameters.class, JavaToKotlinConverterTestBasicGenerated.VarArg.class, JavaToKotlinConverterTestBasicGenerated.WhileStatement.class})
public class JavaToKotlinConverterTestBasicGenerated extends AbstractJavaToKotlinConveterTestBasic {
    public void testAllFilesPresentInAst() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast"), Pattern.compile("^(.+)\\.jav$"), true);
    }
    
    @TestMetadata("j2k/tests/testData/ast/annotations")
    public static class Annotations extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInAnnotations() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/annotations"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("jetbrainsNotNull.jav")
        public void testJetbrainsNotNull() throws Exception {
            doTest("j2k/tests/testData/ast/annotations/jetbrainsNotNull.jav");
        }
        
        @TestMetadata("jetbrainsNotNullChainExpr.jav")
        public void testJetbrainsNotNullChainExpr() throws Exception {
            doTest("j2k/tests/testData/ast/annotations/jetbrainsNotNullChainExpr.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/anonymousBlock")
    public static class AnonymousBlock extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInAnonymousBlock() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/anonymousBlock"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("oneAnonBlock.jav")
        public void testOneAnonBlock() throws Exception {
            doTest("j2k/tests/testData/ast/anonymousBlock/oneAnonBlock.jav");
        }
        
        @TestMetadata("oneStaticAnonBlock.jav")
        public void testOneStaticAnonBlock() throws Exception {
            doTest("j2k/tests/testData/ast/anonymousBlock/oneStaticAnonBlock.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayAccessExpression")
    public static class ArrayAccessExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInArrayAccessExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/arrayAccessExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("expressionIndex.jav")
        public void testExpressionIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/expressionIndex.jav");
        }
        
        @TestMetadata("intIndex.jav")
        public void testIntIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/intIndex.jav");
        }
        
        @TestMetadata("variableIndex.jav")
        public void testVariableIndex() throws Exception {
            doTest("j2k/tests/testData/ast/arrayAccessExpression/variableIndex.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayInitializerExpression")
    public static class ArrayInitializerExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInArrayInitializerExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/arrayInitializerExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("doubleArray.jav")
        public void testDoubleArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/doubleArray.jav");
        }
        
        @TestMetadata("doubleArrayWithVariables.jav")
        public void testDoubleArrayWithVariables() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/doubleArrayWithVariables.jav");
        }
        
        @TestMetadata("floatArray.jav")
        public void testFloatArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/floatArray.jav");
        }
        
        @TestMetadata("intArrayWithLength.jav")
        public void testIntArrayWithLength() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/intArrayWithLength.jav");
        }
        
        @TestMetadata("javaLangDoubleArray.jav")
        public void testJavaLangDoubleArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/javaLangDoubleArray.jav");
        }
        
        @TestMetadata("javaLangFloatArray.jav")
        public void testJavaLangFloatArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/javaLangFloatArray.jav");
        }
        
        @TestMetadata("newByte.jav")
        public void testNewByte() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/newByte.jav");
        }
        
        @TestMetadata("newInt.jav")
        public void testNewInt() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/newInt.jav");
        }
        
        @TestMetadata("objectArrayWithLength.jav")
        public void testObjectArrayWithLength() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/objectArrayWithLength.jav");
        }
        
        @TestMetadata("oneDim.jav")
        public void testOneDim() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/oneDim.jav");
        }
        
        @TestMetadata("oneDimWithVariables.jav")
        public void testOneDimWithVariables() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/oneDimWithVariables.jav");
        }
        
        @TestMetadata("twoDim.jav")
        public void testTwoDim() throws Exception {
            doTest("j2k/tests/testData/ast/arrayInitializerExpression/twoDim.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/arrayType")
    public static class ArrayType extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInArrayType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/arrayType"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("arrayInitializationStatement.jav")
        public void testArrayInitializationStatement() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatement.jav");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimension.jav")
        public void testArrayInitializationStatementWithDimension() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimension.jav");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimension3d.jav")
        public void testArrayInitializationStatementWithDimension3d() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimension3d.jav");
        }
        
        @TestMetadata("arrayInitializationStatementWithDimensionExplicit.jav")
        public void testArrayInitializationStatementWithDimensionExplicit() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/arrayInitializationStatementWithDimensionExplicit.jav");
        }
        
        @TestMetadata("d2StringEmptyArray.jav")
        public void testD2StringEmptyArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/d2StringEmptyArray.jav");
        }
        
        @TestMetadata("d3StringEmptyArray.jav")
        public void testD3StringEmptyArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/d3StringEmptyArray.jav");
        }
        
        @TestMetadata("longArray.jav")
        public void testLongArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/longArray.jav");
        }
        
        @TestMetadata("methodArrayArgs.jav")
        public void testMethodArrayArgs() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/methodArrayArgs.jav");
        }
        
        @TestMetadata("newIntArray.jav")
        public void testNewIntArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/newIntArray.jav");
        }
        
        @TestMetadata("newStringArray.jav")
        public void testNewStringArray() throws Exception {
            doTest("j2k/tests/testData/ast/arrayType/newStringArray.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/assertStatement")
    public static class AssertStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInAssertStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/assertStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("onlyCondition.jav")
        public void testOnlyCondition() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/onlyCondition.jav");
        }
        
        @TestMetadata("onlyConditionWithBraces.jav")
        public void testOnlyConditionWithBraces() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/onlyConditionWithBraces.jav");
        }
        
        @TestMetadata("withStringDetail.jav")
        public void testWithStringDetail() throws Exception {
            doTest("j2k/tests/testData/ast/assertStatement/withStringDetail.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/assignmentExpression")
    public static class AssignmentExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInAssignmentExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/assignmentExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("and.jav")
        public void testAnd() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/and.jav");
        }
        
        @TestMetadata("assignment.jav")
        public void testAssignment() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/assignment.jav");
        }
        
        @TestMetadata("divideAssign.jav")
        public void testDivideAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/divideAssign.jav");
        }
        
        @TestMetadata("minusAssign.jav")
        public void testMinusAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/minusAssign.jav");
        }
        
        @TestMetadata("multiplyAssign.jav")
        public void testMultiplyAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/multiplyAssign.jav");
        }
        
        @TestMetadata("nullability.jav")
        public void testNullability() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/nullability.jav");
        }
        
        @TestMetadata("or.jav")
        public void testOr() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/or.jav");
        }
        
        @TestMetadata("plusAssign.jav")
        public void testPlusAssign() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/plusAssign.jav");
        }
        
        @TestMetadata("reminder.jav")
        public void testReminder() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/reminder.jav");
        }
        
        @TestMetadata("shiftLeft.jav")
        public void testShiftLeft() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/shiftLeft.jav");
        }
        
        @TestMetadata("shiftRight.jav")
        public void testShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/shiftRight.jav");
        }
        
        @TestMetadata("simpleAssignment.jav")
        public void testSimpleAssignment() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/simpleAssignment.jav");
        }
        
        @TestMetadata("unsignedRightShift.jav")
        public void testUnsignedRightShift() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/unsignedRightShift.jav");
        }
        
        @TestMetadata("xor.jav")
        public void testXor() throws Exception {
            doTest("j2k/tests/testData/ast/assignmentExpression/xor.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/binaryExpression")
    public static class BinaryExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInBinaryExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/binaryExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("and.jav")
        public void testAnd() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/and.jav");
        }
        
        @TestMetadata("conditionalAnd.jav")
        public void testConditionalAnd() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/conditionalAnd.jav");
        }
        
        @TestMetadata("conditionalOr.jav")
        public void testConditionalOr() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/conditionalOr.jav");
        }
        
        @TestMetadata("divide.jav")
        public void testDivide() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/divide.jav");
        }
        
        @TestMetadata("greaterThan.jav")
        public void testGreaterThan() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/greaterThan.jav");
        }
        
        @TestMetadata("greaterThanEqual.jav")
        public void testGreaterThanEqual() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/greaterThanEqual.jav");
        }
        
        @TestMetadata("lessThan.jav")
        public void testLessThan() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/lessThan.jav");
        }
        
        @TestMetadata("lessThanEqual.jav")
        public void testLessThanEqual() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/lessThanEqual.jav");
        }
        
        @TestMetadata("minus.jav")
        public void testMinus() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/minus.jav");
        }
        
        @TestMetadata("multiply.jav")
        public void testMultiply() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/multiply.jav");
        }
        
        @TestMetadata("or.jav")
        public void testOr() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/or.jav");
        }
        
        @TestMetadata("plus.jav")
        public void testPlus() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/plus.jav");
        }
        
        @TestMetadata("remainder.jav")
        public void testRemainder() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/remainder.jav");
        }
        
        @TestMetadata("shiftLeft.jav")
        public void testShiftLeft() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/shiftLeft.jav");
        }
        
        @TestMetadata("shiftRight.jav")
        public void testShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/shiftRight.jav");
        }
        
        @TestMetadata("unsignedRightShift.jav")
        public void testUnsignedRightShift() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/unsignedRightShift.jav");
        }
        
        @TestMetadata("xor.jav")
        public void testXor() throws Exception {
            doTest("j2k/tests/testData/ast/binaryExpression/xor.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/boxedType")
    public static class BoxedType extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInBoxedType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/boxedType"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("boolean.jav")
        public void testBoolean() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/boolean.jav");
        }
        
        @TestMetadata("Boxing.jav")
        public void testBoxing() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/Boxing.jav");
        }
        
        @TestMetadata("byte.jav")
        public void testByte() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/byte.jav");
        }
        
        @TestMetadata("character.jav")
        public void testCharacter() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/character.jav");
        }
        
        @TestMetadata("double.jav")
        public void testDouble() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/double.jav");
        }
        
        @TestMetadata("float.jav")
        public void testFloat() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/float.jav");
        }
        
        @TestMetadata("integer.jav")
        public void testInteger() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/integer.jav");
        }
        
        @TestMetadata("kt-671.jav")
        public void testKt_671() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/kt-671.jav");
        }
        
        @TestMetadata("long.jav")
        public void testLong() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/long.jav");
        }
        
        @TestMetadata("object.jav")
        public void testObject() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/object.jav");
        }
        
        @TestMetadata("short.jav")
        public void testShort() throws Exception {
            doTest("j2k/tests/testData/ast/boxedType/short.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/breakStatement")
    public static class BreakStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInBreakStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/breakStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("breakWithLabel.jav")
        public void testBreakWithLabel() throws Exception {
            doTest("j2k/tests/testData/ast/breakStatement/breakWithLabel.jav");
        }
        
        @TestMetadata("breakWithoutLabel.jav")
        public void testBreakWithoutLabel() throws Exception {
            doTest("j2k/tests/testData/ast/breakStatement/breakWithoutLabel.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/callChainExpression")
    public static class CallChainExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInCallChainExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/callChainExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("libraryFieldCall.jav")
        public void testLibraryFieldCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryFieldCall.jav");
        }
        
        @TestMetadata("libraryMethodCall.jav")
        public void testLibraryMethodCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryMethodCall.jav");
        }
        
        @TestMetadata("libraryMethodCallFromInstance.jav")
        public void testLibraryMethodCallFromInstance() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryMethodCallFromInstance.jav");
        }
        
        @TestMetadata("libraryStringFieldCall.jav")
        public void testLibraryStringFieldCall() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/libraryStringFieldCall.jav");
        }
        
        @TestMetadata("sout.jav")
        public void testSout() throws Exception {
            doTest("j2k/tests/testData/ast/callChainExpression/sout.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/class")
    public static class Class extends AbstractJavaToKotlinConveterTestBasic {
        @TestMetadata("abstractClass.jav")
        public void testAbstractClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/abstractClass.jav");
        }
        
        @TestMetadata("abstractClassShape.jav")
        public void testAbstractClassShape() throws Exception {
            doTest("j2k/tests/testData/ast/class/abstractClassShape.jav");
        }
        
        public void testAllFilesPresentInClass() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/class"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("class.jav")
        public void testClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/class.jav");
        }
        
        @TestMetadata("ClassShadowing.jav")
        public void testClassShadowing() throws Exception {
            doTest("j2k/tests/testData/ast/class/ClassShadowing.jav");
        }
        
        @TestMetadata("classWithEmptyMethods.jav")
        public void testClassWithEmptyMethods() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithEmptyMethods.jav");
        }
        
        @TestMetadata("classWithFields.jav")
        public void testClassWithFields() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithFields.jav");
        }
        
        @TestMetadata("classWithMultiplyFields.jav")
        public void testClassWithMultiplyFields() throws Exception {
            doTest("j2k/tests/testData/ast/class/classWithMultiplyFields.jav");
        }
        
        @TestMetadata("emptyClass.jav")
        public void testEmptyClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/emptyClass.jav");
        }
        
        @TestMetadata("extendsOneClassAndImplementsOneInterface.jav")
        public void testExtendsOneClassAndImplementsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/class/extendsOneClassAndImplementsOneInterface.jav");
        }
        
        @TestMetadata("extendsOneClassAndImplementsSeveralInterfaces.jav")
        public void testExtendsOneClassAndImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/class/extendsOneClassAndImplementsSeveralInterfaces.jav");
        }
        
        @TestMetadata("finalClass.jav")
        public void testFinalClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/finalClass.jav");
        }
        
        @TestMetadata("genericClass.jav")
        public void testGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/genericClass.jav");
        }
        
        @TestMetadata("innerEmptyClass.jav")
        public void testInnerEmptyClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/innerEmptyClass.jav");
        }
        
        @TestMetadata("innerStaticClass.jav")
        public void testInnerStaticClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/innerStaticClass.jav");
        }
        
        @TestMetadata("internalClass.jav")
        public void testInternalClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/internalClass.jav");
        }
        
        @TestMetadata("kt-639.jav")
        public void testKt_639() throws Exception {
            doTest("j2k/tests/testData/ast/class/kt-639.jav");
        }
        
        @TestMetadata("oneStaticFieldOneNonStatic.jav")
        public void testOneStaticFieldOneNonStatic() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticFieldOneNonStatic.jav");
        }
        
        @TestMetadata("oneStaticMethod.jav")
        public void testOneStaticMethod() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticMethod.jav");
        }
        
        @TestMetadata("oneStaticMethodOneNonStatic.jav")
        public void testOneStaticMethodOneNonStatic() throws Exception {
            doTest("j2k/tests/testData/ast/class/oneStaticMethodOneNonStatic.jav");
        }
        
        @TestMetadata("pivateClass.jav")
        public void testPivateClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/pivateClass.jav");
        }
        
        @TestMetadata("privateInit.jav")
        public void testPrivateInit() throws Exception {
            doTest("j2k/tests/testData/ast/class/privateInit.jav");
        }
        
        @TestMetadata("protectedClass.jav")
        public void testProtectedClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/protectedClass.jav");
        }
        
        @TestMetadata("publicClass.jav")
        public void testPublicClass() throws Exception {
            doTest("j2k/tests/testData/ast/class/publicClass.jav");
        }
        
        @TestMetadata("simpleInheritance.jav")
        public void testSimpleInheritance() throws Exception {
            doTest("j2k/tests/testData/ast/class/simpleInheritance.jav");
        }
        
        @TestMetadata("twoStaticMethod.jav")
        public void testTwoStaticMethod() throws Exception {
            doTest("j2k/tests/testData/ast/class/twoStaticMethod.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/classExpression")
    public static class ClassExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInClassExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/classExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("complexExample.jav")
        public void testComplexExample() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/complexExample.jav");
        }
        
        @TestMetadata("objectClass.jav")
        public void testObjectClass() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/objectClass.jav");
        }
        
        @TestMetadata("stringClass.jav")
        public void testStringClass() throws Exception {
            doTest("j2k/tests/testData/ast/classExpression/stringClass.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/conditionalExpression")
    public static class ConditionalExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInConditionalExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/conditionalExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("simpleConditionalExpression.jav")
        public void testSimpleConditionalExpression() throws Exception {
            doTest("j2k/tests/testData/ast/conditionalExpression/simpleConditionalExpression.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/constructors")
    public static class Constructors extends AbstractJavaToKotlinConveterTestBasic {
        @TestMetadata("allCallsPrimary.jav")
        public void testAllCallsPrimary() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/allCallsPrimary.jav");
        }
        
        @TestMetadata("allCallsPrimary2.jav")
        public void testAllCallsPrimary2() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/allCallsPrimary2.jav");
        }
        
        public void testAllFilesPresentInConstructors() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/constructors"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("customerBuilder.jav")
        public void testCustomerBuilder() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/customerBuilder.jav");
        }
        
        @TestMetadata("genericIdentifier.jav")
        public void testGenericIdentifier() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/genericIdentifier.jav");
        }
        
        @TestMetadata("identifier.jav")
        public void testIdentifier() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/identifier.jav");
        }
        
        @TestMetadata("withManyDefaultParams.jav")
        public void testWithManyDefaultParams() throws Exception {
            doTest("j2k/tests/testData/ast/constructors/withManyDefaultParams.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/continueStatement")
    public static class ContinueStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInContinueStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/continueStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("continueWithLabel.jav")
        public void testContinueWithLabel() throws Exception {
            doTest("j2k/tests/testData/ast/continueStatement/continueWithLabel.jav");
        }
        
        @TestMetadata("continueWithoutLabel.jav")
        public void testContinueWithoutLabel() throws Exception {
            doTest("j2k/tests/testData/ast/continueStatement/continueWithoutLabel.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/declarationStatement")
    public static class DeclarationStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInDeclarationStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/declarationStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("multiplyFinalIntDeclaration.jav")
        public void testMultiplyFinalIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/multiplyFinalIntDeclaration.jav");
        }
        
        @TestMetadata("multiplyIntDeclaration.jav")
        public void testMultiplyIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/multiplyIntDeclaration.jav");
        }
        
        @TestMetadata("singleFinalIntDeclaration.jav")
        public void testSingleFinalIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleFinalIntDeclaration.jav");
        }
        
        @TestMetadata("singleFinalStringDeclaration.jav")
        public void testSingleFinalStringDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleFinalStringDeclaration.jav");
        }
        
        @TestMetadata("singleIntDeclaration.jav")
        public void testSingleIntDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleIntDeclaration.jav");
        }
        
        @TestMetadata("singleStringDeclaration.jav")
        public void testSingleStringDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/declarationStatement/singleStringDeclaration.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/doWhileStatement")
    public static class DoWhileStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInDoWhileStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/doWhileStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("whileWithBlock.jav")
        public void testWhileWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithBlock.jav");
        }
        
        @TestMetadata("whileWithEmptyBlock.jav")
        public void testWhileWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithEmptyBlock.jav");
        }
        
        @TestMetadata("whileWithExpression.jav")
        public void testWhileWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithExpression.jav");
        }
        
        @TestMetadata("whileWithReturn.jav")
        public void testWhileWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/doWhileStatement/whileWithReturn.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/enum")
    public static class Enum extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInEnum() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/enum"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("colorEnum.jav")
        public void testColorEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/colorEnum.jav");
        }
        
        @TestMetadata("emptyEnum.jav")
        public void testEmptyEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/emptyEnum.jav");
        }
        
        @TestMetadata("enumConstantIsNotNull.jav")
        public void testEnumConstantIsNotNull() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumConstantIsNotNull.jav");
        }
        
        @TestMetadata("enumImplementsOneInterface.jav")
        public void testEnumImplementsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumImplementsOneInterface.jav");
        }
        
        @TestMetadata("enumImplementsSeveralInterfaces.jav")
        public void testEnumImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumImplementsSeveralInterfaces.jav");
        }
        
        @TestMetadata("enumWithNameField.jav")
        public void testEnumWithNameField() throws Exception {
            doTest("j2k/tests/testData/ast/enum/enumWithNameField.jav");
        }
        
        @TestMetadata("fieldsWithPrimaryPrivateConstructor.jav")
        public void testFieldsWithPrimaryPrivateConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/enum/fieldsWithPrimaryPrivateConstructor.jav");
        }
        
        @TestMetadata("internalEnum.jav")
        public void testInternalEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/internalEnum.jav");
        }
        
        @TestMetadata("overrideToString.jav")
        public void testOverrideToString() throws Exception {
            doTest("j2k/tests/testData/ast/enum/overrideToString.jav");
        }
        
        @TestMetadata("primaryPrivateConstructor.jav")
        public void testPrimaryPrivateConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/enum/primaryPrivateConstructor.jav");
        }
        
        @TestMetadata("privateEnum.jav")
        public void testPrivateEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/privateEnum.jav");
        }
        
        @TestMetadata("protectedEnum.jav")
        public void testProtectedEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/protectedEnum.jav");
        }
        
        @TestMetadata("publicEnum.jav")
        public void testPublicEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/publicEnum.jav");
        }
        
        @TestMetadata("runnableImplementation.jav")
        public void testRunnableImplementation() throws Exception {
            doTest("j2k/tests/testData/ast/enum/runnableImplementation.jav");
        }
        
        @TestMetadata("typeSafeEnum.jav")
        public void testTypeSafeEnum() throws Exception {
            doTest("j2k/tests/testData/ast/enum/typeSafeEnum.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/field")
    public static class Field extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInField() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/field"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classChildExtendsBase.jav")
        public void testClassChildExtendsBase() throws Exception {
            doTest("j2k/tests/testData/ast/field/classChildExtendsBase.jav");
        }
        
        @TestMetadata("internalField.jav")
        public void testInternalField() throws Exception {
            doTest("j2k/tests/testData/ast/field/internalField.jav");
        }
        
        @TestMetadata("privateField.jav")
        public void testPrivateField() throws Exception {
            doTest("j2k/tests/testData/ast/field/privateField.jav");
        }
        
        @TestMetadata("protectedField.jav")
        public void testProtectedField() throws Exception {
            doTest("j2k/tests/testData/ast/field/protectedField.jav");
        }
        
        @TestMetadata("publicField.jav")
        public void testPublicField() throws Exception {
            doTest("j2k/tests/testData/ast/field/publicField.jav");
        }
        
        @TestMetadata("valWithInit.jav")
        public void testValWithInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/valWithInit.jav");
        }
        
        @TestMetadata("varWithInit.jav")
        public void testVarWithInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/varWithInit.jav");
        }
        
        @TestMetadata("varWithoutInit.jav")
        public void testVarWithoutInit() throws Exception {
            doTest("j2k/tests/testData/ast/field/varWithoutInit.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/for")
    public static class For extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInFor() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/for"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("commonCaseForTest.jav")
        public void testCommonCaseForTest() throws Exception {
            doTest("j2k/tests/testData/ast/for/commonCaseForTest.jav");
        }
        
        @TestMetadata("forRangeWithLE.jav")
        public void testForRangeWithLE() throws Exception {
            doTest("j2k/tests/testData/ast/for/forRangeWithLE.jav");
        }
        
        @TestMetadata("forRangeWithLT.jav")
        public void testForRangeWithLT() throws Exception {
            doTest("j2k/tests/testData/ast/for/forRangeWithLT.jav");
        }
        
        @TestMetadata("forWithBlock.jav")
        public void testForWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithBlock.jav");
        }
        
        @TestMetadata("forWithBlockAndDoubleUpdate.jav")
        public void testForWithBlockAndDoubleUpdate() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithBlockAndDoubleUpdate.jav");
        }
        
        @TestMetadata("forWithEmptyBlock.jav")
        public void testForWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithEmptyBlock.jav");
        }
        
        @TestMetadata("forWithExpression.jav")
        public void testForWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithExpression.jav");
        }
        
        @TestMetadata("forWithNullCondition.jav")
        public void testForWithNullCondition() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullCondition.jav");
        }
        
        @TestMetadata("forWithNullInit.jav")
        public void testForWithNullInit() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullInit.jav");
        }
        
        @TestMetadata("forWithNullUpdate.jav")
        public void testForWithNullUpdate() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithNullUpdate.jav");
        }
        
        @TestMetadata("forWithReturn.jav")
        public void testForWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/for/forWithReturn.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/foreachStatement")
    public static class ForeachStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInForeachStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/foreachStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("enhancedForWithBlock.jav")
        public void testEnhancedForWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithBlock.jav");
        }
        
        @TestMetadata("enhancedForWithEmptyBlock.jav")
        public void testEnhancedForWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithEmptyBlock.jav");
        }
        
        @TestMetadata("enhancedForWithExpression.jav")
        public void testEnhancedForWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithExpression.jav");
        }
        
        @TestMetadata("enhancedForWithReturn.jav")
        public void testEnhancedForWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/foreachStatement/enhancedForWithReturn.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/function")
    public static class Function extends AbstractJavaToKotlinConveterTestBasic {
        @TestMetadata("abstractMethod.jav")
        public void testAbstractMethod() throws Exception {
            doTest("j2k/tests/testData/ast/function/abstractMethod.jav");
        }
        
        public void testAllFilesPresentInFunction() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/function"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classGenericParam.jav")
        public void testClassGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/function/classGenericParam.jav");
        }
        
        @TestMetadata("emptyVoidMethod.jav")
        public void testEmptyVoidMethod() throws Exception {
            doTest("j2k/tests/testData/ast/function/emptyVoidMethod.jav");
        }
        
        @TestMetadata("extendsBaseWhichExtendsObject.jav")
        public void testExtendsBaseWhichExtendsObject() throws Exception {
            doTest("j2k/tests/testData/ast/function/extendsBaseWhichExtendsObject.jav");
        }
        
        @TestMetadata("final.jav")
        public void testFinal() throws Exception {
            doTest("j2k/tests/testData/ast/function/final.jav");
        }
        
        @TestMetadata("functionInFinalClass.jav")
        public void testFunctionInFinalClass() throws Exception {
            doTest("j2k/tests/testData/ast/function/functionInFinalClass.jav");
        }
        
        @TestMetadata("internal.jav")
        public void testInternal() throws Exception {
            doTest("j2k/tests/testData/ast/function/internal.jav");
        }
        
        @TestMetadata("main.jav")
        public void testMain() throws Exception {
            doTest("j2k/tests/testData/ast/function/main.jav");
        }
        
        @TestMetadata("methodClassType.jav")
        public void testMethodClassType() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodClassType.jav");
        }
        
        @TestMetadata("methodPrimitiveType.jav")
        public void testMethodPrimitiveType() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodPrimitiveType.jav");
        }
        
        @TestMetadata("methodPrimitiveType2.jav")
        public void testMethodPrimitiveType2() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodPrimitiveType2.jav");
        }
        
        @TestMetadata("methodWithReturnStatement.jav")
        public void testMethodWithReturnStatement() throws Exception {
            doTest("j2k/tests/testData/ast/function/methodWithReturnStatement.jav");
        }
        
        @TestMetadata("open.jav")
        public void testOpen() throws Exception {
            doTest("j2k/tests/testData/ast/function/open.jav");
        }
        
        @TestMetadata("override.jav")
        public void testOverride() throws Exception {
            doTest("j2k/tests/testData/ast/function/override.jav");
        }
        
        @TestMetadata("overrideAndOpen.jav")
        public void testOverrideAndOpen() throws Exception {
            doTest("j2k/tests/testData/ast/function/overrideAndOpen.jav");
        }
        
        @TestMetadata("overrideObject.jav")
        public void testOverrideObject() throws Exception {
            doTest("j2k/tests/testData/ast/function/overrideObject.jav");
        }
        
        @TestMetadata("ownGenericParam.jav")
        public void testOwnGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/function/ownGenericParam.jav");
        }
        
        @TestMetadata("ownSeveralGenericParams.jav")
        public void testOwnSeveralGenericParams() throws Exception {
            doTest("j2k/tests/testData/ast/function/ownSeveralGenericParams.jav");
        }
        
        @TestMetadata("private.jav")
        public void testPrivate() throws Exception {
            doTest("j2k/tests/testData/ast/function/private.jav");
        }
        
        @TestMetadata("protected.jav")
        public void testProtected() throws Exception {
            doTest("j2k/tests/testData/ast/function/protected.jav");
        }
        
        @TestMetadata("public.jav")
        public void testPublic() throws Exception {
            doTest("j2k/tests/testData/ast/function/public.jav");
        }
        
        @TestMetadata("varVararg.jav")
        public void testVarVararg() throws Exception {
            doTest("j2k/tests/testData/ast/function/varVararg.jav");
        }
        
        @TestMetadata("writableParameter.jav")
        public void testWritableParameter() throws Exception {
            doTest("j2k/tests/testData/ast/function/writableParameter.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/identifier")
    public static class Identifier extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInIdentifier() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/identifier"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("finalFieldReference.jav")
        public void testFinalFieldReference() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/finalFieldReference.jav");
        }
        
        @TestMetadata("keywords.jav")
        public void testKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/keywords.jav");
        }
        
        @TestMetadata("withDollar.jav")
        public void testWithDollar() throws Exception {
            doTest("j2k/tests/testData/ast/identifier/withDollar.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/ifStatement")
    public static class IfStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInIfStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/ifStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("ifStatementWithEmptyBlocks.jav")
        public void testIfStatementWithEmptyBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithEmptyBlocks.jav");
        }
        
        @TestMetadata("ifStatementWithMultilineBlocks.jav")
        public void testIfStatementWithMultilineBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithMultilineBlocks.jav");
        }
        
        @TestMetadata("ifStatementWithOneLineBlocks.jav")
        public void testIfStatementWithOneLineBlocks() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithOneLineBlocks.jav");
        }
        
        @TestMetadata("ifStatementWithoutElse.jav")
        public void testIfStatementWithoutElse() throws Exception {
            doTest("j2k/tests/testData/ast/ifStatement/ifStatementWithoutElse.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/importStatement")
    public static class ImportStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInImportStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/importStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("importWithKeywords.jav")
        public void testImportWithKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/importWithKeywords.jav");
        }
        
        @TestMetadata("importWithStar.jav")
        public void testImportWithStar() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/importWithStar.jav");
        }
        
        @TestMetadata("oneImport.jav")
        public void testOneImport() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/oneImport.jav");
        }
        
        @TestMetadata("onlyImports.jav")
        public void testOnlyImports() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/onlyImports.jav");
        }
        
        @TestMetadata("simpleImport.jav")
        public void testSimpleImport() throws Exception {
            doTest("j2k/tests/testData/ast/importStatement/simpleImport.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/inProjectionType")
    public static class InProjectionType extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInInProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/inProjectionType"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("methodParams.jav")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/inProjectionType/methodParams.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/inheritance")
    public static class Inheritance extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInInheritance() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/inheritance"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classOneExtendsBaseGeneric.jav")
        public void testClassOneExtendsBaseGeneric() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseGeneric.jav");
        }
        
        @TestMetadata("classOneExtendsBaseWithOneParam.jav")
        public void testClassOneExtendsBaseWithOneParam() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithOneParam.jav");
        }
        
        @TestMetadata("classOneExtendsBaseWithZeroParams.jav")
        public void testClassOneExtendsBaseWithZeroParams() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithZeroParams.jav");
        }
        
        @TestMetadata("classOneExtendsBaseWithZeroParamsNonEmptyConstructor.jav")
        public void testClassOneExtendsBaseWithZeroParamsNonEmptyConstructor() throws Exception {
            doTest("j2k/tests/testData/ast/inheritance/classOneExtendsBaseWithZeroParamsNonEmptyConstructor.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/isOperator")
    public static class IsOperator extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInIsOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/isOperator"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("complicatedExpression.jav")
        public void testComplicatedExpression() throws Exception {
            doTest("j2k/tests/testData/ast/isOperator/complicatedExpression.jav");
        }
        
        @TestMetadata("simpleReference.jav")
        public void testSimpleReference() throws Exception {
            doTest("j2k/tests/testData/ast/isOperator/simpleReference.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/issues")
    public static class Issues extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInIssues() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/issues"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("arrayLength.jav")
        public void testArrayLength() throws Exception {
            doTest("j2k/tests/testData/ast/issues/arrayLength.jav");
        }
        
        @TestMetadata("comments.jav")
        public void testComments() throws Exception {
            doTest("j2k/tests/testData/ast/issues/comments.jav");
        }
        
        @TestMetadata("kt-1016.jav")
        public void testKt_1016() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1016.jav");
        }
        
        @TestMetadata("kt-1048.jav")
        public void testKt_1048() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1048.jav");
        }
        
        @TestMetadata("kt-1074.jav")
        public void testKt_1074() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-1074.jav");
        }
        
        @TestMetadata("kt-543.jav")
        public void testKt_543() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543.jav");
        }
        
        @TestMetadata("kt-543-boxed.jav")
        public void testKt_543_boxed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543-boxed.jav");
        }
        
        @TestMetadata("kt-543-mixed.jav")
        public void testKt_543_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-543-mixed.jav");
        }
        
        @TestMetadata("kt-638.jav")
        public void testKt_638() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-638.jav");
        }
        
        @TestMetadata("kt-696.jav")
        public void testKt_696() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-696.jav");
        }
        
        @TestMetadata("kt-792.jav")
        public void testKt_792() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-792.jav");
        }
        
        @TestMetadata("kt-792-mixed.jav")
        public void testKt_792_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-792-mixed.jav");
        }
        
        @TestMetadata("kt-794.jav")
        public void testKt_794() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-794.jav");
        }
        
        @TestMetadata("kt-794-mixed.jav")
        public void testKt_794_mixed() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-794-mixed.jav");
        }
        
        @TestMetadata("kt-809.jav")
        public void testKt_809() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-809.jav");
        }
        
        @TestMetadata("kt-809-string.jav")
        public void testKt_809_string() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-809-string.jav");
        }
        
        @TestMetadata("kt-820.jav")
        public void testKt_820() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820.jav");
        }
        
        @TestMetadata("kt-820-field.jav")
        public void testKt_820_field() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820-field.jav");
        }
        
        @TestMetadata("kt-820-string.jav")
        public void testKt_820_string() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-820-string.jav");
        }
        
        @TestMetadata("kt-824.jav")
        public void testKt_824() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-824.jav");
        }
        
        @TestMetadata("kt-824-isDir.jav")
        public void testKt_824_isDir() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-824-isDir.jav");
        }
        
        @TestMetadata("kt-828.jav")
        public void testKt_828() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-828.jav");
        }
        
        @TestMetadata("kt-836.jav")
        public void testKt_836() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-836.jav");
        }
        
        @TestMetadata("kt-837.jav")
        public void testKt_837() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-837.jav");
        }
        
        @TestMetadata("kt-852.jav")
        public void testKt_852() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-852.jav");
        }
        
        @TestMetadata("kt-871.jav")
        public void testKt_871() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-871.jav");
        }
        
        @TestMetadata("kt-879.jav")
        public void testKt_879() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-879.jav");
        }
        
        @TestMetadata("kt-893.jav")
        public void testKt_893() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-893.jav");
        }
        
        @TestMetadata("kt-963.jav")
        public void testKt_963() throws Exception {
            doTest("j2k/tests/testData/ast/issues/kt-963.jav");
        }
        
        @TestMetadata("qualifyStatic.jav")
        public void testQualifyStatic() throws Exception {
            doTest("j2k/tests/testData/ast/issues/qualifyStatic.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/kotlinExclusion")
    public static class KotlinExclusion extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInKotlinExclusion() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/kotlinExclusion"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("kt-656.jav")
        public void testKt_656() throws Exception {
            doTest("j2k/tests/testData/ast/kotlinExclusion/kt-656.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/labelStatement")
    public static class LabelStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInLabelStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/labelStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("complicatedExampleFromJavaTutorial.jav")
        public void testComplicatedExampleFromJavaTutorial() throws Exception {
            doTest("j2k/tests/testData/ast/labelStatement/complicatedExampleFromJavaTutorial.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/list")
    public static class List extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInList() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/list"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("ForEach.jav")
        public void testForEach() throws Exception {
            doTest("j2k/tests/testData/ast/list/ForEach.jav");
        }
        
        @TestMetadata("Lists.jav")
        public void testLists() throws Exception {
            doTest("j2k/tests/testData/ast/list/Lists.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/literalExpression")
    public static class LiteralExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInLiteralExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/literalExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("char.jav")
        public void testChar() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/char.jav");
        }
        
        @TestMetadata("dollarInsideString.jav")
        public void testDollarInsideString() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/dollarInsideString.jav");
        }
        
        @TestMetadata("endsWithDFL.jav")
        public void testEndsWithDFL() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/endsWithDFL.jav");
        }
        
        @TestMetadata("hex.jav")
        public void testHex() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/hex.jav");
        }
        
        @TestMetadata("octal.jav")
        public void testOctal() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/octal.jav");
        }
        
        @TestMetadata("trueOrFalse.jav")
        public void testTrueOrFalse() throws Exception {
            doTest("j2k/tests/testData/ast/literalExpression/trueOrFalse.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/localVariable")
    public static class LocalVariable extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInLocalVariable() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/localVariable"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("object.jav")
        public void testObject() throws Exception {
            doTest("j2k/tests/testData/ast/localVariable/object.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/methodCallExpression")
    public static class MethodCallExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInMethodCallExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/methodCallExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("callWithKeywords.jav")
        public void testCallWithKeywords() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/callWithKeywords.jav");
        }
        
        @TestMetadata("emptyCall.jav")
        public void testEmptyCall() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/emptyCall.jav");
        }
        
        @TestMetadata("genericMethod.jav")
        public void testGenericMethod() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/genericMethod.jav");
        }
        
        @TestMetadata("simpleCall.jav")
        public void testSimpleCall() throws Exception {
            doTest("j2k/tests/testData/ast/methodCallExpression/simpleCall.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/misc")
    public static class Misc extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInMisc() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/misc"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("packageWithClass.jav")
        public void testPackageWithClass() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithClass.jav");
        }
        
        @TestMetadata("packageWithClasses.jav")
        public void testPackageWithClasses() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithClasses.jav");
        }
        
        @TestMetadata("packageWithImports.jav")
        public void testPackageWithImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithImports.jav");
        }
        
        @TestMetadata("packageWithMixedImports.jav")
        public void testPackageWithMixedImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithMixedImports.jav");
        }
        
        @TestMetadata("packageWithOpenClass.jav")
        public void testPackageWithOpenClass() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithOpenClass.jav");
        }
        
        @TestMetadata("packageWithStaticImports.jav")
        public void testPackageWithStaticImports() throws Exception {
            doTest("j2k/tests/testData/ast/misc/packageWithStaticImports.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/newClassExpression")
    public static class NewClassExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInNewClassExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/newClassExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classWithParam.jav")
        public void testClassWithParam() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithParam.jav");
        }
        
        @TestMetadata("classWithParams.jav")
        public void testClassWithParams() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithParams.jav");
        }
        
        @TestMetadata("classWithoutBody.jav")
        public void testClassWithoutBody() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/classWithoutBody.jav");
        }
        
        @TestMetadata("fullQualifiedName.jav")
        public void testFullQualifiedName() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/fullQualifiedName.jav");
        }
        
        @TestMetadata("fullQualifiedName2.jav")
        public void testFullQualifiedName2() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/fullQualifiedName2.jav");
        }
        
        @TestMetadata("genericClassInvocation.jav")
        public void testGenericClassInvocation() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/genericClassInvocation.jav");
        }
        
        @TestMetadata("newClassByFullName.jav")
        public void testNewClassByFullName() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newClassByFullName.jav");
        }
        
        @TestMetadata("newClassWithAnonymousScope.jav")
        public void testNewClassWithAnonymousScope() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newClassWithAnonymousScope.jav");
        }
        
        @TestMetadata("newInnerClass.jav")
        public void testNewInnerClass() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newInnerClass.jav");
        }
        
        @TestMetadata("newListAndNewMember.jav")
        public void testNewListAndNewMember() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newListAndNewMember.jav");
        }
        
        @TestMetadata("newStaticInnerClass.jav")
        public void testNewStaticInnerClass() throws Exception {
            doTest("j2k/tests/testData/ast/newClassExpression/newStaticInnerClass.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/objectLiteral")
    public static class ObjectLiteral extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInObjectLiteral() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/objectLiteral"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("MyFrame.jav")
        public void testMyFrame() throws Exception {
            doTest("j2k/tests/testData/ast/objectLiteral/MyFrame.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/outProjectionType")
    public static class OutProjectionType extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInOutProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/outProjectionType"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("methodParams.jav")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/outProjectionType/methodParams.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/packageStatement")
    public static class PackageStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInPackageStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/packageStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("orgJetbrainsJetJ2kIn.jav")
        public void testOrgJetbrainsJetJ2kIn() throws Exception {
            doTest("j2k/tests/testData/ast/packageStatement/orgJetbrainsJetJ2kIn.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/parenthesizedExpression")
    public static class ParenthesizedExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInParenthesizedExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/parenthesizedExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("parenthesized.jav")
        public void testParenthesized() throws Exception {
            doTest("j2k/tests/testData/ast/parenthesizedExpression/parenthesized.jav");
        }
        
        @TestMetadata("parenthesized2.jav")
        public void testParenthesized2() throws Exception {
            doTest("j2k/tests/testData/ast/parenthesizedExpression/parenthesized2.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/polyadicExpression")
    public static class PolyadicExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInPolyadicExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/polyadicExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("divide.jav")
        public void testDivide() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/divide.jav");
        }
        
        @TestMetadata("minus.jav")
        public void testMinus() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/minus.jav");
        }
        
        @TestMetadata("multiply.jav")
        public void testMultiply() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/multiply.jav");
        }
        
        @TestMetadata("plus.jav")
        public void testPlus() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/plus.jav");
        }
        
        @TestMetadata("remainder.jav")
        public void testRemainder() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/remainder.jav");
        }
        
        @TestMetadata("unassignedShiftRight.jav")
        public void testUnassignedShiftRight() throws Exception {
            doTest("j2k/tests/testData/ast/polyadicExpression/unassignedShiftRight.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/postfixOperator")
    public static class PostfixOperator extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInPostfixOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/postfixOperator"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("decrement.jav")
        public void testDecrement() throws Exception {
            doTest("j2k/tests/testData/ast/postfixOperator/decrement.jav");
        }
        
        @TestMetadata("increment.jav")
        public void testIncrement() throws Exception {
            doTest("j2k/tests/testData/ast/postfixOperator/increment.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/prefixOperator")
    public static class PrefixOperator extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInPrefixOperator() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/prefixOperator"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("decrement.jav")
        public void testDecrement() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/decrement.jav");
        }
        
        @TestMetadata("excl.jav")
        public void testExcl() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/excl.jav");
        }
        
        @TestMetadata("increment.jav")
        public void testIncrement() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/increment.jav");
        }
        
        @TestMetadata("kt-667.jav")
        public void testKt_667() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/kt-667.jav");
        }
        
        @TestMetadata("nullableIf.jav")
        public void testNullableIf() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/nullableIf.jav");
        }
        
        @TestMetadata("tilde.jav")
        public void testTilde() throws Exception {
            doTest("j2k/tests/testData/ast/prefixOperator/tilde.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/rawGenerics")
    public static class RawGenerics extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInRawGenerics() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/rawGenerics"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("kt-540.jav")
        public void testKt_540() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540.jav");
        }
        
        @TestMetadata("kt-540-map.jav")
        public void testKt_540_map() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540-map.jav");
        }
        
        @TestMetadata("kt-540-rawGenericClass.jav")
        public void testKt_540_rawGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/kt-540-rawGenericClass.jav");
        }
        
        @TestMetadata("rawGenericMethod.jav")
        public void testRawGenericMethod() throws Exception {
            doTest("j2k/tests/testData/ast/rawGenerics/rawGenericMethod.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/returnStatement")
    public static class ReturnStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInReturnStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/returnStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("returnChar.jav")
        public void testReturnChar() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnChar.jav");
        }
        
        @TestMetadata("returnLiteral.jav")
        public void testReturnLiteral() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnLiteral.jav");
        }
        
        @TestMetadata("returnNumber.jav")
        public void testReturnNumber() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnNumber.jav");
        }
        
        @TestMetadata("returnString.jav")
        public void testReturnString() throws Exception {
            doTest("j2k/tests/testData/ast/returnStatement/returnString.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/starProjectionType")
    public static class StarProjectionType extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInStarProjectionType() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/starProjectionType"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("methodParams.jav")
        public void testMethodParams() throws Exception {
            doTest("j2k/tests/testData/ast/starProjectionType/methodParams.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/superExpression")
    public static class SuperExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInSuperExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/superExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classAdotSuperFoo.jav")
        public void testClassAdotSuperFoo() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/classAdotSuperFoo.jav");
        }
        
        @TestMetadata("classAextendsB.jav")
        public void testClassAextendsB() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/classAextendsB.jav");
        }
        
        @TestMetadata("superStatement.jav")
        public void testSuperStatement() throws Exception {
            doTest("j2k/tests/testData/ast/superExpression/superStatement.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/switch")
    public static class Switch extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInSwitch() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/switch"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("comlicatedFallDown.jav")
        public void testComlicatedFallDown() throws Exception {
            doTest("j2k/tests/testData/ast/switch/comlicatedFallDown.jav");
        }
        
        @TestMetadata("emptySwitch.jav")
        public void testEmptySwitch() throws Exception {
            doTest("j2k/tests/testData/ast/switch/emptySwitch.jav");
        }
        
        @TestMetadata("fallDown.jav")
        public void testFallDown() throws Exception {
            doTest("j2k/tests/testData/ast/switch/fallDown.jav");
        }
        
        @TestMetadata("kt-539.jav")
        public void testKt_539() throws Exception {
            doTest("j2k/tests/testData/ast/switch/kt-539.jav");
        }
        
        @TestMetadata("nondefault.jav")
        public void testNondefault() throws Exception {
            doTest("j2k/tests/testData/ast/switch/nondefault.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/synchronizedStatement")
    public static class SynchronizedStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInSynchronizedStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/synchronizedStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("singleLineExample.jav")
        public void testSingleLineExample() throws Exception {
            doTest("j2k/tests/testData/ast/synchronizedStatement/singleLineExample.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/thisExpression")
    public static class ThisExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInThisExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/thisExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classAdotThisFoo.jav")
        public void testClassAdotThisFoo() throws Exception {
            doTest("j2k/tests/testData/ast/thisExpression/classAdotThisFoo.jav");
        }
        
        @TestMetadata("thisStatement.jav")
        public void testThisStatement() throws Exception {
            doTest("j2k/tests/testData/ast/thisExpression/thisStatement.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/throwStatement")
    public static class ThrowStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInThrowStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/throwStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("simpleThrowStatement.jav")
        public void testSimpleThrowStatement() throws Exception {
            doTest("j2k/tests/testData/ast/throwStatement/simpleThrowStatement.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/trait")
    public static class Trait extends AbstractJavaToKotlinConveterTestBasic {
        @TestMetadata("abstactInterface.jav")
        public void testAbstactInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/abstactInterface.jav");
        }
        
        public void testAllFilesPresentInTrait() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/trait"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("emptyInterface.jav")
        public void testEmptyInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/emptyInterface.jav");
        }
        
        @TestMetadata("extendsOneClassAndImplementsSeveralInterfaces.jav")
        public void testExtendsOneClassAndImplementsSeveralInterfaces() throws Exception {
            doTest("j2k/tests/testData/ast/trait/extendsOneClassAndImplementsSeveralInterfaces.jav");
        }
        
        @TestMetadata("extendsOneInterface.jav")
        public void testExtendsOneInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/extendsOneInterface.jav");
        }
        
        @TestMetadata("interfaceWithFields.jav")
        public void testInterfaceWithFields() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithFields.jav");
        }
        
        @TestMetadata("interfaceWithMethodDeclaration.jav")
        public void testInterfaceWithMethodDeclaration() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithMethodDeclaration.jav");
        }
        
        @TestMetadata("interfaceWithStaticFields.jav")
        public void testInterfaceWithStaticFields() throws Exception {
            doTest("j2k/tests/testData/ast/trait/interfaceWithStaticFields.jav");
        }
        
        @TestMetadata("internalInterface.jav")
        public void testInternalInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/internalInterface.jav");
        }
        
        @TestMetadata("privateInterface.jav")
        public void testPrivateInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/privateInterface.jav");
        }
        
        @TestMetadata("protectedInterface.jav")
        public void testProtectedInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/protectedInterface.jav");
        }
        
        @TestMetadata("publicInterface.jav")
        public void testPublicInterface() throws Exception {
            doTest("j2k/tests/testData/ast/trait/publicInterface.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/tryStatement")
    public static class TryStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInTryStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/tryStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("commonCaseForTryStatement.jav")
        public void testCommonCaseForTryStatement() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/commonCaseForTryStatement.jav");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithEmptyFinally.jav")
        public void testEmptyTryWithTwoCatchesWithEmptyFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithEmptyFinally.jav");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithFinally.jav")
        public void testEmptyTryWithTwoCatchesWithFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithFinally.jav");
        }
        
        @TestMetadata("emptyTryWithTwoCatchesWithoutFinally.jav")
        public void testEmptyTryWithTwoCatchesWithoutFinally() throws Exception {
            doTest("j2k/tests/testData/ast/tryStatement/emptyTryWithTwoCatchesWithoutFinally.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/typeCastExpression")
    public static class TypeCastExpression extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInTypeCastExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/typeCastExpression"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("extendsWildcardCast.jav")
        public void testExtendsWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/extendsWildcardCast.jav");
        }
        
        @TestMetadata("fooCast.jav")
        public void testFooCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/fooCast.jav");
        }
        
        @TestMetadata("intCast.jav")
        public void testIntCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/intCast.jav");
        }
        
        @TestMetadata("primitiveType.jav")
        public void testPrimitiveType() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/primitiveType.jav");
        }
        
        @TestMetadata("simpleGenericCast.jav")
        public void testSimpleGenericCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/simpleGenericCast.jav");
        }
        
        @TestMetadata("stringCast.jav")
        public void testStringCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/stringCast.jav");
        }
        
        @TestMetadata("superWildcardCast.jav")
        public void testSuperWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/superWildcardCast.jav");
        }
        
        @TestMetadata("wildcardCast.jav")
        public void testWildcardCast() throws Exception {
            doTest("j2k/tests/testData/ast/typeCastExpression/wildcardCast.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/typeParameters")
    public static class TypeParameters extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInTypeParameters() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/typeParameters"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("classDoubleParametrizationWithTwoBoundsWithExtending.jav")
        public void testClassDoubleParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classDoubleParametrizationWithTwoBoundsWithExtending.jav");
        }
        
        @TestMetadata("classParametrizationWithTwoBounds.jav")
        public void testClassParametrizationWithTwoBounds() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classParametrizationWithTwoBounds.jav");
        }
        
        @TestMetadata("classParametrizationWithTwoBoundsWithExtending.jav")
        public void testClassParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/classParametrizationWithTwoBoundsWithExtending.jav");
        }
        
        @TestMetadata("complexExampleWithClassExtending.jav")
        public void testComplexExampleWithClassExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/complexExampleWithClassExtending.jav");
        }
        
        @TestMetadata("complexExampleWithClassMultiplyExtending.jav")
        public void testComplexExampleWithClassMultiplyExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/complexExampleWithClassMultiplyExtending.jav");
        }
        
        @TestMetadata("genericClass.jav")
        public void testGenericClass() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/genericClass.jav");
        }
        
        @TestMetadata("genericParam.jav")
        public void testGenericParam() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/genericParam.jav");
        }
        
        @TestMetadata("manyGenericParams.jav")
        public void testManyGenericParams() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/manyGenericParams.jav");
        }
        
        @TestMetadata("methodDoubleParametrizationWithTwoBounds.jav")
        public void testMethodDoubleParametrizationWithTwoBounds() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/methodDoubleParametrizationWithTwoBounds.jav");
        }
        
        @TestMetadata("traitDoubleParametrizationWithTwoBoundsWithExtending.jav")
        public void testTraitDoubleParametrizationWithTwoBoundsWithExtending() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/traitDoubleParametrizationWithTwoBoundsWithExtending.jav");
        }
        
        @TestMetadata("where.jav")
        public void testWhere() throws Exception {
            doTest("j2k/tests/testData/ast/typeParameters/where.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/varArg")
    public static class VarArg extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInVarArg() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/varArg"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("ellipsisTypeSeveralParams.jav")
        public void testEllipsisTypeSeveralParams() throws Exception {
            doTest("j2k/tests/testData/ast/varArg/ellipsisTypeSeveralParams.jav");
        }
        
        @TestMetadata("ellipsisTypeSingleParams.jav")
        public void testEllipsisTypeSingleParams() throws Exception {
            doTest("j2k/tests/testData/ast/varArg/ellipsisTypeSingleParams.jav");
        }
        
    }
    
    @TestMetadata("j2k/tests/testData/ast/whileStatement")
    public static class WhileStatement extends AbstractJavaToKotlinConveterTestBasic {
        public void testAllFilesPresentInWhileStatement() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("j2k/tests/testData/ast/whileStatement"), Pattern.compile("^(.+)\\.jav$"), true);
        }
        
        @TestMetadata("whileWithBlock.jav")
        public void testWhileWithBlock() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithBlock.jav");
        }
        
        @TestMetadata("whileWithEmptyBlock.jav")
        public void testWhileWithEmptyBlock() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithEmptyBlock.jav");
        }
        
        @TestMetadata("whileWithExpression.jav")
        public void testWhileWithExpression() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithExpression.jav");
        }
        
        @TestMetadata("whileWithReturn.jav")
        public void testWhileWithReturn() throws Exception {
            doTest("j2k/tests/testData/ast/whileStatement/whileWithReturn.jav");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("JavaToKotlinConverterTestBasicGenerated");
        suite.addTestSuite(JavaToKotlinConverterTestBasicGenerated.class);
        suite.addTestSuite(Annotations.class);
        suite.addTestSuite(AnonymousBlock.class);
        suite.addTestSuite(ArrayAccessExpression.class);
        suite.addTestSuite(ArrayInitializerExpression.class);
        suite.addTestSuite(ArrayType.class);
        suite.addTestSuite(AssertStatement.class);
        suite.addTestSuite(AssignmentExpression.class);
        suite.addTestSuite(BinaryExpression.class);
        suite.addTestSuite(BoxedType.class);
        suite.addTestSuite(BreakStatement.class);
        suite.addTestSuite(CallChainExpression.class);
        suite.addTestSuite(Class.class);
        suite.addTestSuite(ClassExpression.class);
        suite.addTestSuite(ConditionalExpression.class);
        suite.addTestSuite(Constructors.class);
        suite.addTestSuite(ContinueStatement.class);
        suite.addTestSuite(DeclarationStatement.class);
        suite.addTestSuite(DoWhileStatement.class);
        suite.addTestSuite(Enum.class);
        suite.addTestSuite(Field.class);
        suite.addTestSuite(For.class);
        suite.addTestSuite(ForeachStatement.class);
        suite.addTestSuite(Function.class);
        suite.addTestSuite(Identifier.class);
        suite.addTestSuite(IfStatement.class);
        suite.addTestSuite(ImportStatement.class);
        suite.addTestSuite(InProjectionType.class);
        suite.addTestSuite(Inheritance.class);
        suite.addTestSuite(IsOperator.class);
        suite.addTestSuite(Issues.class);
        suite.addTestSuite(KotlinExclusion.class);
        suite.addTestSuite(LabelStatement.class);
        suite.addTestSuite(List.class);
        suite.addTestSuite(LiteralExpression.class);
        suite.addTestSuite(LocalVariable.class);
        suite.addTestSuite(MethodCallExpression.class);
        suite.addTestSuite(Misc.class);
        suite.addTestSuite(NewClassExpression.class);
        suite.addTestSuite(ObjectLiteral.class);
        suite.addTestSuite(OutProjectionType.class);
        suite.addTestSuite(PackageStatement.class);
        suite.addTestSuite(ParenthesizedExpression.class);
        suite.addTestSuite(PolyadicExpression.class);
        suite.addTestSuite(PostfixOperator.class);
        suite.addTestSuite(PrefixOperator.class);
        suite.addTestSuite(RawGenerics.class);
        suite.addTestSuite(ReturnStatement.class);
        suite.addTestSuite(StarProjectionType.class);
        suite.addTestSuite(SuperExpression.class);
        suite.addTestSuite(Switch.class);
        suite.addTestSuite(SynchronizedStatement.class);
        suite.addTestSuite(ThisExpression.class);
        suite.addTestSuite(ThrowStatement.class);
        suite.addTestSuite(Trait.class);
        suite.addTestSuite(TryStatement.class);
        suite.addTestSuite(TypeCastExpression.class);
        suite.addTestSuite(TypeParameters.class);
        suite.addTestSuite(VarArg.class);
        suite.addTestSuite(WhileStatement.class);
        return suite;
    }
}
